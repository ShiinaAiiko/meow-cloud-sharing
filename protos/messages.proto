syntax = "proto3";

option go_package = "./;protos";
package message;
// import "user.proto";
// import "contact.proto";
// import "group.proto";

message ChatDialogue {
  // type Group/Contact
  string type = 1;
  string lastMessageId = 2;
  int64 lastMessageTime = 3;
  // groupId/UserId
  string id = 4;
  int64 unreadMessageCount = 5;
  string roomId = 6;
  Messages lastMessage = 7;
}

message MessagesAudio {
  int64 time = 1;
  string url = 2;
}
message MessagesVideo {
  int64 time = 1;
  string url = 2;
  int64 width = 3;
  int64 height = 4;
  string type = 5;
}
message MessagesImage {
  string url = 1;
  int64 width = 2;
  int64 height = 3;
  // 'image/gif' | 'image/jpeg'
  string type = 4;
}

message MessagesCall {
  // Status:
  // 1 connected successfully
  // 0 calling
  // -1 Missing call
  // -2 Other devices calling
  // -3 Invite to join the call
  int64 status = 1;
  string roomId = 2;
  repeated MessagesCallParticipants participants = 3;
  // Type: Audio Video ScreenShare
  string type = 4;
  int64 time = 5;
}

message MessagesAtUsers { string uid = 1; }
message MessagesReadUsers { string uid = 1; }
message MessagesForwardMessages { string id = 1; }

message Messages {

  string id = 1;
  // RoomId md5(appId+groupId/appId+authorId+friendId)
  string roomId = 2;
  string authorId = 3;
  string replyId = 4;
  Messages replyMessage = 16;
  repeated MessagesAtUsers atUsers = 5;
  repeated MessagesReadUsers readUsers = 6;
  // 转发一堆聊天记录、（预留）
  repeated MessagesForwardMessages forwardMessages = 7;
  string message = 8;
  MessagesAudio audio = 9;
  MessagesVideo video = 10;
  MessagesImage image = 11;
  MessagesCall call = 12;
  int64 createTime = 13;
  // 预留限时消息
  int64 deadlineTime = 14;
  int64 recallTime = 15;
  int64 editTime = 17;
}

message GetRecentChatDialogueList {
  message Request {}
  message Response {
    repeated ChatDialogue list = 1;
    int64 total = 2;
  }
}

message JoinRoom {
  message Request {
    // RoomId md5(appId+groupId/appId+authorId+friendId)
    repeated string roomIds = 1;
  }
  message Response {
    // string roomId = 1;
    // int64 authorId = 2;
    // int64 anonymousUID = 3;
    // int64 totalUser = 4;
    // repeated user.RoomUserInfo list = 5;
  }
}

message LeaveRoom {
  message Request {
    // RoomId md5(appId+groupId/appId+authorId+friendId)
    repeated string roomIds = 1;
  }
  message Response {}
}

// 预留
message GetAllUnreadMessage {
  message Request {}
  message Response {
    message UnreadMessageCountItem {
      // string id = 1;
      // string type = 2;
      // int64 count = 3;
      // ChatRecordItem lastMessage = 4;
    }
    repeated UnreadMessageCountItem list = 1;
    int64 total = 2;
  }
}

// socketio api
message SendMessage {
  message Request {
    // RoomId md5(appId+groupId/appId+authorId+friendId)
    string roomId = 2;
    string authorId = 3;
    string replyId = 4;
    repeated MessagesAtUsers atUsers = 5;
    repeated MessagesReadUsers readUsers = 6;
    // 转发一堆聊天记录、（预留）
    repeated MessagesForwardMessages forwardMessages = 7;
    string message = 8;
    MessagesAudio audio = 9;
    MessagesVideo video = 10;
    MessagesImage image = 11;
    MessagesCall call = 12;
    // type Group/Contact
    string type = 13;
  }
  message Response { Messages message = 1; }
}

// socketio api
message EditMessage {
  message Request {
    string roomId = 1;
    string messageId = 2;
    string authorId = 3;
    string message = 4;
  }
  message Response { Messages message = 1; }
}

// 需要检测是否本人是否在这个room里
message GetHistoricalMessages {
  message Request {
    string roomId = 1;
    int64 pageNum = 3;
    int64 pageSize = 4;
    // 项1开始时间。项2结束
    message TimeRange {
      int64 start = 1;
      int64 end = 2;
    }
    TimeRange timeRange = 5;
    // type Group/Contact
    string type = 6;

    // （预留）Unread / All
    // string type = 6;
  }
  message Response {
    repeated Messages list = 1;
    int64 total = 2;
  }
}

message ReadMessageItem {
  string id = 1;
  repeated int64 readUserIds = 6;
}

// 需要检测是否本人是否在这个room里
message ReadAllMessages {
  message Request { string roomId = 1; }
  message Response {
    string roomId = 1;
    string uid = 2;
  }
}

// 自己的能删除所有人
// 别人的只能删除自己
message DeleteMessages {
  message Request {
    string roomId = 1;
    // 包含 AllMessages 则是全部删除
    repeated string messageIdList = 2;
    // AllUser / Myself
    string type = 3;
    int64 expirationTime = 4;
  }
  // 删除所有人的则必须socket提醒对方，将对方自己的消息删除
  message Response {
    // 包含 AllMessages 则是全部删除
    string roomId = 1;
    repeated string messageIdList = 2;
    // 谁删除的
    string uid = 3;
  }
}

// 包括自己也在内
message MessagesCallParticipants {
  string uid = 1;
  bool caller = 2;
}

message TurnServer {
  repeated string urls = 1;
  string username = 2;
  string credential = 3;
}

message StartCalling {
  message Request {
    string roomId = 1;
    string type = 2;
    repeated MessagesCallParticipants participants = 3;
  }
  message Response {
    string roomId = 1;
    string type = 2;
    repeated MessagesCallParticipants participants = 3;
    // socket路由参数
    string currentUserId = 4;
    string callToken = 5;
    TurnServer turnServer = 6;
  }
}

message CallReconnect {
  message Request {
    string roomId = 1;
    repeated string reconnectUserId = 2;
  }
  message Response {
    string roomId = 1;
    repeated string reconnectUserId = 2;
    // socket路由参数
    string currentUserId = 4;
    string callToken = 5;
    TurnServer turnServer = 6;
  }
}

// 中途加入 预留
message JoinCalling {
  message Request {
    string roomId = 1;
    string type = 2;
    repeated MessagesCallParticipants participants = 3;
  }
  message Response {
    string roomId = 1;
    string type = 2;
    repeated MessagesCallParticipants participants = 3;
    // socket路由参数
    string currentUserId = 6;
  }
}

message Hangup {
  message Request {
    string roomId = 1;
    string type = 2;
    repeated MessagesCallParticipants participants = 3;

    // // 当最后一个人再发生这些信息，用于发条消息
    // // 且以打进电话人的名义发送
    // bool send = 4;

    // 1 connected successfully
    // 0 calling
    // -1 Missing call
    // -2 Other devices calling
    // -3 Invite to join the call
    int64 status = 5;
    int64 callTime = 6;
  }
  // socket直接发给所有人，然后在顶部提示正在语音聊天。参与人则跳提醒
  message Response {
    string roomId = 1;
    string type = 2;
    repeated MessagesCallParticipants participants = 3;
    // socket路由参数
    string currentUserId = 4;
    int64 status = 5;
    int64 callTime = 6;
  }
}